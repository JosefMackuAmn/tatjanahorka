/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!********************************!*\
  !*** ./src/client/js/index.js ***!
  \********************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("// UTILITY FUNCTIONS\n\n// Rendering the element or removing it from the screen smoothly - with animations\n// The element must have 3 CSS Classes available - hidden class, visible class, hiding class\n// Hidden class - display: none, no animation\n// Visible class - display: block (or whatever except none) and an animation of the element appearing on the page (sliding -in or so)\n// Hiding class - animation of the element disappearing\n// Element has only one of these classes at a time.\nconst showOrHideEl = (element, cssClass) => {\n    if([...element.classList].includes(`${cssClass}--hidden`)) {\n        element.classList.remove(`${cssClass}--hidden`);\n        element.classList.add(`${cssClass}--visible`);\n    } else if ([...element.classList].includes(`${cssClass}--visible`)) {\n        element.classList.remove(`${cssClass}--visible`);\n        element.classList.add(`${cssClass}--hiding`);\n    } else {\n        element.classList.remove(`${cssClass}--hiding`);\n        element.classList.add(`${cssClass}--hidden`);\n    }\n}\n\n// ORGANIZATIONS\n\nconst organizationContainer = document.querySelector('.organizations__container');\nconst organizationElements = [...organizationContainer.children];\n\n//When mouse cursor enters organization div, rendering animation\norganizationElements.forEach((organization, id) => {\n    organization.addEventListener('mouseenter', () => {\n       createWaveAnimation(id);\n    })\n})  \n   \n// Creating hidden style element for @keyframes \nconst animations = document.createElement('style');\ndocument.documentElement.appendChild(animations);\n\n// The wave svg isn´t by default pointing to 0 rad, so I experimentally found out the angle correction\nconst angleCorrection = -1; //[rad]\n\n// Counting each wave animation creating. This count is used for creating unique animation id´s\nlet animationCounter = 0;\n\n// Managing all currently needed @keyframes in an array\nlet keyframesList = [];\n\n// Setting max amount and min amount of waves that can appear\nconst maxWaves = 5;\nconst minWaves = 2;\n\n//Setting initial wave range\nlet waveRange = 10; //[rem]\n\n// This function sets the wave range taking the window size in account \nconst setUpWaveRange = () => {\n    if(document.documentElement.clientWidth < 1100 && document.documentElement.clientWidth >= 800) {\n        waveRange = 7;\n    } else if (document.documentElement.clientWidth < 800) {\n        waveRange = 6;\n    } else {\n        waveRange = 10;\n    }\n}\n\n// Whenever window is resized, configuring the wave range, so the wave range is \"responsive\"\nwindow.addEventListener('resize', () => {\n    setUpWaveRange();\n})\n\n// Function animates wave element in specified organization element\nconst animateWave = (wave, organizationIndex) => {\n\n    //Generating random angle to get direction, in which the wave will move\n    const randomAngle = Math.random()*2*Math.PI;\n\n    //Generating X and Y offset from the original position based on the random angle\n    const moveX = Math.cos(randomAngle)*waveRange;\n    const moveY = Math.sin(randomAngle)*waveRange;\n\n    //Animation id refers to the total amount of animations created, therefore is unique\n    const animationId = animationCounter;\n\n    //Generating @keyframes identifier - animation name\n    const animationName = `waveAnimation--${organizationIndex}--${animationId}`\n    animationCounter++;\n\n    //Generating keyframes\n    const keyframes = `@keyframes ${animationName} {\n        0% {\n            transform: scale(0.1) translateX(0) translateY(0) rotate(${randomAngle + angleCorrection}rad);\n            opacity: 0;\n            filter: blur(0px);\n        }\n        50% {\n            opacity: .3;\n        }\n        100% {\n            transform: scale(2) translateX(${moveX}rem) translateY(${moveY}rem) rotate(${randomAngle + angleCorrection}rad);\n            opacity : 0;\n            filter: blur(2px);\n            \n        }\n    }`\n\n    // Adding keyframes to keyframeslist. (Manages all active animations)\n    keyframesList.push({id: animationId, keyframes: keyframes});\n\n    // Replacing the <style> element´s content with a new text content, that contains all the keyframes from animationList\n    animations.textContent = keyframesList.map(item => item.keyframes).join(' ');\n\n    // Applying animation to the wave element\n    wave.style.animation = `${animationName} 3s forwards`;\n\n    // Handling situation, hen wave element animation finishes\n    wave.addEventListener('animationend', () => {\n\n        // Removing animation keyframes from the keyframesList\n        keyframesList.splice(keyframesList.findIndex((item) => {\n            return animationId === item.id;\n        }), 1);\n\n        //Updatng <style> element\n        animations.textContent = keyframesList.map(item => item.keyframes).join(' ');\n\n        // Remowing wave element from DOM\n        wave.parentElement.removeChild(wave);\n    });\n}\n\n//Creates a new wave element\nconst spawnWave = (id) => {\n    const wave = document.createElement('div');\n    wave.classList = `organizations__wave organizationions__wave--${id}`;\n\n    return wave;\n}\n\n//Generates wave animation for specified organization\nconst createWaveAnimation = (organizationIndex) => {\n\n    //Hooking organization element\n    const organization = organizationElements[organizationIndex];\n\n    //Selecting number of animations, that will appear during the animation (number is whole and falls between maxWaves and minWaves)\n    const waveNum = Math.floor(Math.random()*(maxWaves-minWaves) + minWaves);\n\n    //Creating selected number of waves, animating them\n    for(let i = 0; i < waveNum; i++) {\n        const wave = spawnWave(i);\n        organization.appendChild(wave);\n        animateWave(wave, organizationIndex);\n    }\n}\n\n//Setting up wave range initially\nsetUpWaveRange();\n\n//REVIEWS\n\n//Cyclically changes the state of review elements (HIDDEN -> VISIBLE -> HIDING -> HIDDEN -> ...)\nconst showOrHideReviewElements = (reviewLeaf, reviewPerson, reviewText) => {\n    showOrHideEl(reviewLeaf, 'review__leaf');\n    showOrHideEl(reviewPerson, 'review__person');\n    showOrHideEl(reviewText, 'review__text');\n}\n\n//Hooking reviews section\nconst reviewsSection = document.getElementById('reviews');\n\n//Getting array of reviews\nconst reviews = reviewsSection.children;\n\n//Setting up iterator\nlet currentId = 0;\n\n//When called, starts cycling through reviews (browser calls it again, when leaf animation ends) \nconst reviewCycler = () => {\n        //Getting current review\n        const review = reviews[currentId];\n\n        //Adding active class, so the reviw doesn´t have display: none anymore\n        review.classList.add('review--active');\n\n        //Getting reviewLeaf, reviewText and reviewPerson\n        const reviewLeaf = review.querySelector('.review__leaf');\n        const reviewText = review.querySelector('.review__text');\n        const reviewPerson = review.querySelector('.review__person');\n    \n        //Setting state for review elements from HIDDEN to VISIBLE\n        showOrHideReviewElements(reviewLeaf, reviewPerson, reviewText);\n      \n        //Incrementing the iterator\n        currentId++;\n\n        //If the iterator after incrementing exceeds review count, setting it back to 0, so the cycling can continue from the first review\n        if(currentId === reviews.length) {\n            currentId = 0;\n        }\n\n        //Setting timeout for when should the review start disappearing\n        setTimeout(() => {\n\n            //Setting state for review elements from VISIBLE to HIDING\n            showOrHideReviewElements(reviewLeaf, reviewPerson, reviewText);\n\n            //When leaf fall animation finishes\n            reviewLeaf.addEventListener('animationend', () => {\n\n                 //Setting state for review elements from HIDING to HIDDEN\n                showOrHideReviewElements(reviewLeaf, reviewPerson, reviewText);\n\n                //Removing the review active class, therefore display: none is set\n                review.classList.remove('review--active');\n\n                //Beginning antother cycle\n                reviewCycler();\n\n            }, \n            // Making sure, that the leaf fall animation event triggers only once\n            {\n                capture: false,\n                once: true,\n                passive: false\n                });\n        }, 10000);\n       \n\n}\n\n//Starting to cycle when the page loads\nreviewCycler();\n\n\n//////////////////\n///// POST EMAIL FORM\n//////////////////\nconst emailInput = document.getElementById('email');\nemailInput.addEventListener('input', () => {\n    const submit = document.getElementById('submit');\n    submit.classList.remove('hidden');\n    setTimeout(() => {\n        submit.style.opacity = \"1\";\n    }, 20);\n});\n\n\n//////////////////\n///// ANIMATIONS\n//////////////////\n\n//Collecting all elements with class \"toBeAnimated\"\nconst toBeAnimatedElements = document.querySelectorAll('.toBeAnimated');\n\n//Creating array of pairs of to be animated elements and their distance from document top border  -> [[element1, distance1], [element2, distance2], ... ]\nconst toBeAnimated = [];\nfor (const element of toBeAnimatedElements) {\n    toBeAnimated.push([element, element.getBoundingClientRect().y + document.documentElement.scrollTop]);\n}\n\n//Handler for 'scroll' event on document.window, triggers animations\nconst animationTriggerer = () => {\n\n    //Contains id´s of elements (in toBeAnimated[]), that are going to be animated this function call\n    const willBeAnimated = [];\n\n\n    for (const animation of toBeAnimated) {\n\n        //If the distance between window top and element´s y coordinate is small enough, animating the element\n        if (animation[1] - document.documentElement.scrollTop <= window.innerHeight - 100) {\n\n            //Removing toBeAnimated class\n            animation[0].classList.remove('toBeAnimated');\n\n            //Finding index of the element\n            const id = toBeAnimated.findIndex((anim) => {\n                return animation === anim;\n            })\n\n            //Adding index to the list\n            willBeAnimated.push(id);\n        }  \n    }\n\n    //If there are some elements that are going to be animated this function call\n    if (willBeAnimated.length > 0) {\n\n        //Mapping toBeAnimated array to an array, in which the elements animated this function call are not included\n        toBeAnimated = toBeAnimated.map((value, idx) => {\n            for (const id of willBeAnimated) {\n                if (id === idx) {\n                    return;\n                }\n            }\n            return value;\n        })\n    }\n    \n}\n\n//When user scrolls, triggering animations\nwindow.addEventListener('scroll', () => {\n    animationTriggerer();\n})\n\n//Triggering animations on page load\nanimationTriggerer();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/client/js/index.js\n");
/******/ })()
;