/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!********************************!*\
  !*** ./src/client/js/index.js ***!
  \********************************/
eval("// UTILITY FUNCTIONS\r\n\r\n// Rendering the element or removing it from the screen smoothly - with animations\r\n// The element must have 3 CSS Classes available - hidden class, visible class, hiding class\r\n// Hidden class - display: none, no animation\r\n// Visible class - display: block (or whatever except none) and an animation of the element appearing on the page (sliding -in or so)\r\n// Hiding class - animation of the element disappearing\r\n// Element has only one of these classes at a time.\r\nconst showOrHideEl = (element, cssClass) => {\r\n  if ([...element.classList].includes(`${cssClass}--hidden`)) {\r\n    element.classList.remove(`${cssClass}--hidden`);\r\n    element.classList.add(`${cssClass}--visible`);\r\n  } else if ([...element.classList].includes(`${cssClass}--visible`)) {\r\n    element.classList.remove(`${cssClass}--visible`);\r\n    element.classList.add(`${cssClass}--hiding`);\r\n  } else {\r\n    element.classList.remove(`${cssClass}--hiding`);\r\n    element.classList.add(`${cssClass}--hidden`);\r\n  }\r\n};\r\n\r\n// ORGANIZATIONS\r\n\r\nconst organizationContainer = document.querySelector(\r\n  \".organizations__container\"\r\n);\r\nconst organizationElements = [...organizationContainer.children];\r\n\r\n//When mouse cursor enters organization div, rendering animation\r\norganizationElements.forEach((organization, id) => {\r\n  organization.addEventListener(\"mouseenter\", () => {\r\n    createWaveAnimation(id);\r\n  });\r\n});\r\n\r\n// Creating hidden style element for @keyframes\r\nconst animations = document.createElement(\"style\");\r\ndocument.documentElement.appendChild(animations);\r\n\r\n// The wave svg isn´t by default pointing to 0 rad, so I experimentally found out the angle correction\r\nconst angleCorrection = -1; //[rad]\r\n\r\n// Counting each wave animation creating. This count is used for creating unique animation id´s\r\nlet animationCounter = 0;\r\n\r\n// Managing all currently needed @keyframes in an array\r\nlet keyframesList = [];\r\n\r\n// Setting max amount and min amount of waves that can appear\r\nconst maxWaves = 5;\r\nconst minWaves = 2;\r\n\r\n//Setting initial wave range\r\nlet waveRange = 10; //[rem]\r\n\r\n// This function sets the wave range taking the window size in account\r\nconst setUpWaveRange = () => {\r\n  if (\r\n    document.documentElement.clientWidth < 1100 &&\r\n    document.documentElement.clientWidth >= 800\r\n  ) {\r\n    waveRange = 7;\r\n  } else if (document.documentElement.clientWidth < 800) {\r\n    waveRange = 6;\r\n  } else {\r\n    waveRange = 10;\r\n  }\r\n};\r\n\r\n// Whenever window is resized, configuring the wave range, so the wave range is \"responsive\"\r\nwindow.addEventListener(\"resize\", () => {\r\n  setUpWaveRange();\r\n});\r\n\r\n// Function animates wave element in specified organization element\r\nconst animateWave = (wave, organizationIndex) => {\r\n  //Generating random angle to get direction, in which the wave will move\r\n  const randomAngle = Math.random() * 2 * Math.PI;\r\n\r\n  //Generating X and Y offset from the original position based on the random angle\r\n  const moveX = Math.cos(randomAngle) * waveRange;\r\n  const moveY = Math.sin(randomAngle) * waveRange;\r\n\r\n  //Animation id refers to the total amount of animations created, therefore is unique\r\n  const animationId = animationCounter;\r\n\r\n  //Generating @keyframes identifier - animation name\r\n  const animationName = `waveAnimation--${organizationIndex}--${animationId}`;\r\n  animationCounter++;\r\n\r\n  //Generating keyframes\r\n  const keyframes = `@keyframes ${animationName} {\r\n        0% {\r\n            transform: scale(0.1) translateX(0) translateY(0) rotate(${\r\n              randomAngle + angleCorrection\r\n            }rad);\r\n            opacity: 0;\r\n            filter: blur(0px);\r\n        }\r\n        50% {\r\n            opacity: .3;\r\n        }\r\n        100% {\r\n            transform: scale(2) translateX(${moveX}rem) translateY(${moveY}rem) rotate(${\r\n    randomAngle + angleCorrection\r\n  }rad);\r\n            opacity : 0;\r\n            filter: blur(2px);\r\n            \r\n        }\r\n    }`;\r\n\r\n  // Adding keyframes to keyframeslist. (Manages all active animations)\r\n  keyframesList.push({ id: animationId, keyframes: keyframes });\r\n\r\n  // Replacing the <style> element´s content with a new text content, that contains all the keyframes from animationList\r\n  animations.textContent = keyframesList\r\n    .map((item) => item.keyframes)\r\n    .join(\" \");\r\n\r\n  // Applying animation to the wave element\r\n  wave.style.animation = `${animationName} 3s forwards`;\r\n\r\n  // Handling situation, hen wave element animation finishes\r\n  wave.addEventListener(\"animationend\", () => {\r\n    // Removing animation keyframes from the keyframesList\r\n    keyframesList.splice(\r\n      keyframesList.findIndex((item) => {\r\n        return animationId === item.id;\r\n      }),\r\n      1\r\n    );\r\n\r\n    //Updatng <style> element\r\n    animations.textContent = keyframesList\r\n      .map((item) => item.keyframes)\r\n      .join(\" \");\r\n\r\n    // Remowing wave element from DOM\r\n    wave.parentElement.removeChild(wave);\r\n  });\r\n};\r\n\r\n//Creates a new wave element\r\nconst spawnWave = (id) => {\r\n  const wave = document.createElement(\"div\");\r\n  wave.classList = `organizations__wave organizationions__wave--${id}`;\r\n\r\n  return wave;\r\n};\r\n\r\n//Generates wave animation for specified organization\r\nconst createWaveAnimation = (organizationIndex) => {\r\n  //Hooking organization element\r\n  const organization = organizationElements[organizationIndex];\r\n\r\n  //Selecting number of animations, that will appear during the animation (number is whole and falls between maxWaves and minWaves)\r\n  const waveNum = Math.floor(Math.random() * (maxWaves - minWaves) + minWaves);\r\n\r\n  //Creating selected number of waves, animating them\r\n  for (let i = 0; i < waveNum; i++) {\r\n    const wave = spawnWave(i);\r\n    organization.appendChild(wave);\r\n    animateWave(wave, organizationIndex);\r\n  }\r\n};\r\n\r\n//Setting up wave range initially\r\nsetUpWaveRange();\r\n\r\n//REVIEWS\r\n\r\n//Cyclically changes the state of review elements (HIDDEN -> VISIBLE -> HIDING -> HIDDEN -> ...)\r\nconst showOrHideReviewElements = (reviewLeaf, reviewPerson, reviewText) => {\r\n  showOrHideEl(reviewLeaf, \"review__leaf\");\r\n  showOrHideEl(reviewPerson, \"review__person\");\r\n  showOrHideEl(reviewText, \"review__text\");\r\n};\r\n\r\n//Hooking reviews section\r\nconst reviewsSection = document.getElementById(\"reviews\");\r\n\r\n//Getting array of reviews\r\nconst reviews = reviewsSection.children;\r\n\r\n//Setting up iterator\r\nlet currentId = 0;\r\n\r\n//When called, starts cycling through reviews (browser calls it again, when leaf animation ends)\r\nconst reviewCycler = () => {\r\n  //Getting current review\r\n  const review = reviews[currentId];\r\n\r\n  //Adding active class, so the reviw doesn´t have display: none anymore\r\n  review.classList.add(\"review--active\");\r\n\r\n  //Getting reviewLeaf, reviewText and reviewPerson\r\n  const reviewLeaf = review.querySelector(\".review__leaf\");\r\n  const reviewText = review.querySelector(\".review__text\");\r\n  const reviewPerson = review.querySelector(\".review__person\");\r\n\r\n  //Setting state for review elements from HIDDEN to VISIBLE\r\n  showOrHideReviewElements(reviewLeaf, reviewPerson, reviewText);\r\n\r\n  //Incrementing the iterator\r\n  currentId++;\r\n\r\n  //If the iterator after incrementing exceeds review count, setting it back to 0, so the cycling can continue from the first review\r\n  if (currentId === reviews.length) {\r\n    currentId = 0;\r\n  }\r\n\r\n  //Setting timeout for when should the review start disappearing\r\n  setTimeout(() => {\r\n    //Setting state for review elements from VISIBLE to HIDING\r\n    showOrHideReviewElements(reviewLeaf, reviewPerson, reviewText);\r\n\r\n    //When leaf fall animation finishes\r\n    reviewLeaf.addEventListener(\r\n      \"animationend\",\r\n      () => {\r\n        //Setting state for review elements from HIDING to HIDDEN\r\n        showOrHideReviewElements(reviewLeaf, reviewPerson, reviewText);\r\n\r\n        //Removing the review active class, therefore display: none is set\r\n        review.classList.remove(\"review--active\");\r\n\r\n        //Beginning antother cycle\r\n        reviewCycler();\r\n      },\r\n      // Making sure, that the leaf fall animation event triggers only once\r\n      {\r\n        capture: false,\r\n        once: true,\r\n        passive: false,\r\n      }\r\n    );\r\n  }, 7000);\r\n};\r\n\r\n//Starting to cycle when the page loads\r\nreviewCycler();\r\n\r\n//////////////////\r\n///// POST EMAIL FORM\r\n//////////////////\r\nconst emailInput = document.getElementById(\"email\");\r\nemailInput.addEventListener(\"input\", () => {\r\n  const submit = document.getElementById(\"submit\");\r\n  submit.classList.remove(\"hidden\");\r\n  setTimeout(() => {\r\n    submit.style.opacity = \"1\";\r\n  }, 20);\r\n});\r\n\r\n//////////////////\r\n///// POST-SCRIPTUM EXPANSION\r\n//////////////////\r\nconst postScriptum = document.getElementById(\"post-scriptum\");\r\nconst showPSPhoto = () => {\r\n  postScriptum.classList.remove(\"closed\");\r\n  postScriptum.removeEventListener(\"click\", showPSPhoto);\r\n};\r\npostScriptum.addEventListener(\"click\", showPSPhoto);\r\n\r\n//////////////////\r\n///// SUCCESS MODAL\r\n//////////////////\r\nconst search = window.location.search;\r\nif (search) {\r\n  const params = search.split(\"=\");\r\n  if ((params && params[0] === \"?success\") || params[0] === \"success\") {\r\n    const success = params[1];\r\n\r\n    const showHideModal = (className, text) => {\r\n      const modalEl = document.createElement(\"div\");\r\n      const header = document.getElementById(\"header\");\r\n      modalEl.classList.add(\"modal\");\r\n      modalEl.classList.add(className);\r\n      modalEl.textContent = text;\r\n      header.append(modalEl);\r\n\r\n      setTimeout(() => {\r\n        modalEl.remove();\r\n      }, 5000);\r\n    };\r\n\r\n    switch (success) {\r\n      case \"true\": {\r\n        showHideModal(\"success\", \"Povedlo se přidat Váš e-mail!\");\r\n        break;\r\n      }\r\n      case \"false\": {\r\n        showHideModal(\"fail\", \"Přidání e-mailu se nepodařilo.\");\r\n        break;\r\n      }\r\n      default:\r\n        null;\r\n    }\r\n  }\r\n}\r\n\r\n//////////////////\r\n///// ANIMATIONS\r\n//////////////////\r\n\r\n//Collecting all elements with class \"toBeAnimated\"\r\nconst toBeAnimatedElements = document.querySelectorAll(\".toBeAnimated\");\r\n\r\n//Creating array of pairs of to be animated elements and their distance from document top border  -> [[element1, distance1], [element2, distance2], ... ]\r\nlet toBeAnimated = [];\r\nfor (const element of toBeAnimatedElements) {\r\n  toBeAnimated.push([\r\n    element,\r\n    element.getBoundingClientRect().y + document.documentElement.scrollTop,\r\n  ]);\r\n}\r\n\r\n//Handler for 'scroll' event on document.window, triggers animations\r\nconst animationTriggerer = () => {\r\n  //Contains id´s of elements (in toBeAnimated[]), that are going to be animated this function call\r\n  const willBeAnimated = [];\r\n\r\n  for (const animation of toBeAnimated) {\r\n    if (animation === undefined) {\r\n      continue;\r\n    }\r\n\r\n    //If the distance between window top and element´s y coordinate is small enough, animating the element\r\n    if (\r\n      animation[1] - document.documentElement.scrollTop <=\r\n      window.innerHeight - 100\r\n    ) {\r\n      //Removing toBeAnimated class\r\n      animation[0].classList.remove(\"toBeAnimated\");\r\n\r\n      //Finding index of the element\r\n      const id = toBeAnimated.findIndex((anim) => {\r\n        return animation === anim;\r\n      });\r\n\r\n      //Adding index to the list\r\n      willBeAnimated.push(id);\r\n    }\r\n  }\r\n\r\n  //If there are some elements that are going to be animated this function call\r\n  if (willBeAnimated.length > 0) {\r\n    //Mapping toBeAnimated array to an array, in which the elements animated this function call are not included\r\n    toBeAnimated = toBeAnimated.map((value, idx) => {\r\n      for (const id of willBeAnimated) {\r\n        if (id === idx) {\r\n          return;\r\n        }\r\n      }\r\n      return value;\r\n    });\r\n  }\r\n};\r\n\r\n//When user scrolls, triggering animations\r\nwindow.addEventListener(\"scroll\", () => {\r\n  animationTriggerer();\r\n});\r\n\r\n//Preventing misbehavior on window resize\r\nwindow.addEventListener(\"resize\", () => {\r\n  //Updating toBeAnimated, because after resizing can the top position be different\r\n  toBeAnimated = [];\r\n  for (const element of toBeAnimatedElements) {\r\n    toBeAnimated.push([\r\n      element,\r\n      element.getBoundingClientRect().y + document.documentElement.scrollTop,\r\n    ]);\r\n  }\r\n});\r\n\r\n//Triggering animations on page load\r\nanimationTriggerer();\r\n\r\n// Removing book img bug\r\nconst bookImg = document.querySelector(\".book__image\");\r\nif (bookImg) {\r\n  setTimeout(() => {\r\n    bookImg.style.minWidth = \"5rem\";\r\n  }, 500);\r\n}\r\n\r\nconst courseButton = document.getElementById(\"course__button\");\r\nconst courseSection = document.getElementById(\"course__section\");\r\n\r\nconst courseHTML = `\r\n    <svg\r\n    class=\"course__bloom1\"\r\n    width=\"59\"\r\n    height=\"65\"\r\n    viewBox=\"0 0 59 65\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n    <use xlink:href=\"#bloom\"></use>\r\n    </svg>\r\n\r\n    <svg\r\n    class=\"course__bloom2\"\r\n    width=\"59\"\r\n    height=\"65\"\r\n    viewBox=\"0 0 59 65\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n    <use xlink:href=\"#bloom\"></use>\r\n    </svg>\r\n\r\n    <svg\r\n    class=\"course__bloom3\"\r\n    width=\"59\"\r\n    height=\"65\"\r\n    viewBox=\"0 0 59 65\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n    <use xlink:href=\"#bloom\"></use>\r\n    </svg>\r\n\r\n    <p class=\"course__text__contact\">\r\n        Kontaktujte nás prosím na mailu barbara.dobesova@seznam.cz\r\n    </p>\r\n\r\n    <div class=\"course__phone\">\r\n        <p class=\"course__phone__text\">Tel. číslo :</p>\r\n        <p class=\"course__phone__text\">732 588 884</p>\r\n    </div>\r\n\r\n    <a\r\n        href=\"https://www.facebook.com/tatjana.horka.9\"        \r\n        class=\"course__button course__button__padding--contact\"\r\n        target=\"_blank\"\r\n    >\r\n        Facebook: Tatjana Horká\r\n    </a>\r\n\r\n    <a     \r\n        href=\"https://www.facebook.com/barbara.dobesova\"       \r\n        class=\"course__button course__button__padding--contact\"\r\n        target=\"_blank\"\r\n    >\r\n        Facebook: Barbara Dobešová\r\n    </a>\r\n`;\r\n\r\nconst handleCourseButton = () => {\r\n  courseSection.innerHTML = courseHTML;\r\n};\r\n\r\ncourseButton.addEventListener(\"mousedown\", handleCourseButton);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/client/js/index.js\n");
/******/ })()
;